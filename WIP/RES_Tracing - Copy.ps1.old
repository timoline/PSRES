<#
    Author: Andrew Morgan (@Andyjmorgan on Twitter, http://www.andrewmorgan.ie)
    Enable and Disable RES Tracing for powerfuse / Workspace manager
    Version: 1.0
    Any comments/ feedback welcome, ping me on twitter, drop me a comment on the blog or via e-mail (andrew at andrewmorgan dot ie)
#>

# Import-Module PSRemoteRegistry

<#
.Synopsis
   Enable RES Tracing for RES Powerfuse / Workspace Manager
.DESCRIPTION
   Enable RES Tracing for RES Powerfuse / Workspace Manager
.EXAMPLE
   Enable-RESTracing 
.EXAMPLE
   Enable-RESTracing -Logfile "C:\TMP"
#>
Function Enable-RESTracing {
[CmdletBinding()] 
param (
    # The name of the computer to connect to.
    [Parameter(Position=0, Mandatory=$true,ValueFromPipeline=$true)]
    [String]
    $ComputerName,

    # *******todo*******
    [Parameter()]
    [String]
    $Logfile="c:\RESTrace.log" ,
    
    # The credential used to connect
    [Management.Automation.PSCredential]
    $Credential
)
    Write-Verbose 'Enabling RESTracing'
    #check OS and get paths
    if ((Get-WmiObject Win32_OperatingSystem -ComputerName $ComputerName).OSArchitecture -eq "64-bit"){
        #64bit
        if (Test-Regkey -ComputerName $ComputerName -key "SOFTWARE\Wow6432Node\RES\Workspace Manager"){
            $KeyPath = "SOFTWARE\Wow6432Node\RES\Workspace Manager"}
        Elseif (Test-Regkey -ComputerName $ComputerName -key "SOFTWARE\Wow6432Node\RES\PowerFuse"){
            $KeyPath ="SOFTWARE\Wow6432Node\RES\PowerFuse"}
        Else {
            Write-Warning "Couldn't locate the registry keys for RES Powerfuse / Workspace Manager"
            break}
    }#end if
    Else {
        #32bit
        if (Test-Regkey -ComputerName $ComputerName -key "SOFTWARE\RES\Workspace Manager"){
            $KeyPath = "SOFTWARE\RES\Workspace Manager"}
        Elseif (Test-Regkey -ComputerName $ComputerName -key "SOFTWARE\RES\PowerFuse"){
            $KeyPath ="SOFTWARE\RES\PowerFuse"}
        Else {
            Write-Warning "Couldn't locate the registry keys for RES Powerfuse / Workspace Manager"
            break}
    } #end else

    if (!(Test-Regkey -ComputerName $ComputerName -key $KeyPath)){
        Write-Error "The path provided must exist"
        Break
    } #end if

    #create registry items
    Set-RegString -ComputerName $ComputerName -Key $KeyPath -Value "Trace" -Data "Yes" -Force -Verbose
    Set-RegString -ComputerName $ComputerName -Key $KeyPath -Value "TraceDetailed" -Data "Yes" -Force -Verbose
    Set-RegString -ComputerName $ComputerName -Key $KeyPath -Value "TraceFile" -Data $Logfile -Force -Verbose

    #stop, wait and start the service
    (Get-Service -ComputerName $ComputerName | where {$_.name -eq "RES"}).stop()
    (Get-Service -ComputerName $ComputerName | where {$_.name -eq "RES"}).WaitForStatus("Stopped")
    (Get-Service -ComputerName $ComputerName | where {$_.name -eq "RES"}).start()
    (Get-Service -ComputerName $ComputerName | where {$_.name -eq "RES"}).WaitForStatus("Running")

    #Set the acl to allow users write:*******todo*******
    $acl = Get-Acl $Logfile
    $permission = "Everyone","FullControl","Allow"
    $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule $permission
    $acl.SetAccessRule($accessRule)
    $acl | Set-Acl $Logfile

    #error checking*******todo*******
    if (!(Test-Path $LogFile)){
        Write-Warning "Log file ($Logfile) does not seem to exist!"
        }
    
    Write-Verbose 'RESTracing is enabled.'
  } #end Function

<#
.Synopsis
   Disable RES Tracing for RES Powerfuse / Workspace Manager
.DESCRIPTION
   Disable RES Tracing for RES Powerfuse / Workspace Manager
.EXAMPLE
   Disable-RESTracing
#>
Function Disable-RESTracing {
[CmdletBinding()] 
param (
    # The name of the computer to connect to.
    [Parameter(Position=0, Mandatory=$true)]
    [String]
    $ComputerName,
    
    # The credential used to connect
    [Management.Automation.PSCredential]
    $Credential
)
    Write-Verbose 'Disabling RESTracing'
     #check OS and get paths
    if ((Get-WmiObject Win32_OperatingSystem -ComputerName $ComputerName).OSArchitecture -eq "64-bit"){
        #64bit
        if (Test-Path "HKLM:\SOFTWARE\Wow6432Node\RES\Workspace Manager"){
            $path = "HKLM:\SOFTWARE\Wow6432Node\RES\Workspace Manager"}
        Elseif (Test-Path "HKLM:\SOFTWARE\Wow6432Node\RES\PowerFuse"){
            $path ="HKLM:\SOFTWARE\Wow6432Node\RES\PowerFuse"}
        Else {
            Write-Warning "Couldn't locate the registry keys for RES Powerfuse / Workspace Manager"
            break}
    }#end if
    Else {
        #32bit
        if (Test-Path "HKLM:\SOFTWARE\RES\Workspace Manager"){
            $path = "HKLM:\SOFTWARE\RES\Workspace Manager"}
        Elseif (Test-Path "HKLM:\SOFTWARE\RES\PowerFuse"){
            $path ="HKLM:\SOFTWARE\RES\PowerFuse"}
        Else {
            Write-Warning "Couldn't locate the registry keys for RES Powerfuse / Workspace Manager"
            break}
    } #end else

    if (!(Test-Path $path)){
        write-Error "The path Provided must exist"
        Break
    } #end if

    if ((Get-ItemProperty $path).trace) {
        Remove-ItemProperty -Name "Trace" -Path $path -Verbose}
    Else {Write-Warning "Trace key missing"}

    if ((Get-ItemProperty $path).tracedetailed) {
        Remove-ItemProperty -Name "TraceDetailed" -Path $path -Verbose}
    Else {Write-Warning "Tracedetailed key missing"}

    if ((Get-ItemProperty $path).TraceFile) {
        Remove-ItemProperty -Name "Tracefile" -Path $path -Verbose}
    Else {Write-Warning "Tracefile key missing"}

    #stop, wait and start the service
    (Get-Service -ComputerName $ComputerName | where {$_.name -eq "RES"}).stop()
    (Get-Service -ComputerName $ComputerName | where {$_.name -eq "RES"}).WaitForStatus("Stopped")
    (Get-Service -ComputerName $ComputerName | where {$_.name -eq "RES"}).start()
    (Get-Service -ComputerName $ComputerName | where {$_.name -eq "RES"}).WaitForStatus("Running")

    Write-Verbose 'RESTracing is disabled.'
} #end Function